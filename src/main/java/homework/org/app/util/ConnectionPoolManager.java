package homework.org.app.util;

import java.lang.reflect.Proxy;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class ConnectionPoolManager {

    private static final String URL_KEY = "db.url";
    private static final String USERNAME_KEY = "db.username";
    private static final String PASSWORD_KEY = "db.password";
    private static final String POOL_SIZE = "db.pool.size";
    private static final Integer DEFAULT_POOL_SIZE = 10;
    private static  BlockingQueue<Connection> pool;
    private static List<Connection> sourceConnections;
    private static final ConnectionPoolManager INSTANCE = new ConnectionPoolManager();

    static {
        loadDriver();
        initConnectionPool();
    }

    private ConnectionPoolManager() {
    }

    public static ConnectionPoolManager getInstance() {
        return INSTANCE;
    }

    private static void initConnectionPool() {
        var poolSize = PropertiesUtil.get(POOL_SIZE);
        var size = poolSize == null ? DEFAULT_POOL_SIZE : Integer.parseInt(poolSize);
        pool = new ArrayBlockingQueue<>(size);
        sourceConnections = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            var connection = open();
            var proxyConnection = (Connection)
                    Proxy.newProxyInstance(ConnectionPoolManager.class.getClassLoader(),
                    new Class[]{Connection.class},
                    (proxy, method, args) -> method.getName().equals("close")
            ? pool.add((Connection)proxy) : method.invoke(connection, args));
            pool.add(proxyConnection);
            sourceConnections.add(connection);
        }
    }

    public static Connection get() {
        try {
            return pool.take();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static Connection open() {
        try {
            return DriverManager.getConnection(
                    PropertiesUtil.get(URL_KEY),
                    PropertiesUtil.get(USERNAME_KEY),
                    PropertiesUtil.get(PASSWORD_KEY)
            );
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private static void loadDriver() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public static void closePool() {
        try {
            for (Connection sourceConnection : sourceConnections) {
                sourceConnection.close();
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public static Statement createStatement() throws SQLException {
        Connection conn = get();
        Statement realStatement = conn.createStatement();

        return (Statement) Proxy.newProxyInstance(
                ConnectionPoolManager.class.getClassLoader(),
                new Class[]{Statement.class},
                (proxy, method, args) -> {
                    if (method.getName().equals("close")) {
                        realStatement.close();
                        return pool.offer(conn);
                    }
                    return method.invoke(realStatement, args);
                }
        );
    }

    public static PreparedStatement prepareStatement(String sql) throws SQLException {
        Connection conn = get();
        PreparedStatement realStatement = conn.prepareStatement(sql);

        return (PreparedStatement) Proxy.newProxyInstance(
                ConnectionPoolManager.class.getClassLoader(),
                new Class[]{PreparedStatement.class},
                (proxy, method, args) -> {
                    if (method.getName().equals("close")) {
                        realStatement.close();
                        return pool.offer(conn); // Возвращаем соединение в пул!
                    }
                    return method.invoke(realStatement, args);
                }
        );
    }

    public static PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        Connection conn = get();
        PreparedStatement realStatement = conn.prepareStatement(sql, autoGeneratedKeys);

        return (PreparedStatement) Proxy.newProxyInstance(
                ConnectionPoolManager.class.getClassLoader(),
                new Class[]{PreparedStatement.class},
                (proxy, method, args) -> {
                    if (method.getName().equals("close")) {
                        realStatement.close();
                        return pool.offer(conn);
                    }
                    return method.invoke(realStatement, args);
                }
        );
    }

    public static void setParameters(PreparedStatement statement, Object... params) throws SQLException {
        for (int i = 0; i < params.length; i++) {
            statement.setObject(i + 1, params[i]);
        }
    }

    public static ResultSet setParametersAndExecuteQuery(PreparedStatement prepStatement, Object... params) throws SQLException {
        setParameters(prepStatement, params);

        ResultSet realResultSet = prepStatement.executeQuery();

        return (ResultSet) Proxy.newProxyInstance(
                ConnectionPoolManager.class.getClassLoader(),
                new Class[]{ResultSet.class},
                (proxy, method, args) -> {
                    if (method.getName().equals("close")) {
                        realResultSet.close();
                        prepStatement.close();
                        return null;
                    }
                    return method.invoke(realResultSet, args);
                }
        );
    }
}
