package homework.org.app.util;

import java.sql.*;

public final class ConnectionManager {

    private static final String URL_KEY = "db.url";
    private static final String USERNAME_KEY = "db.username";
    private static final String PASSWORD_KEY = "db.password";

    private static ConnectionManager instance;
    private Connection transactionConnection;
    private Connection autoCommitConnection;

    static {
        loadDriver();
    }

    private ConnectionManager() {
    }

    public static synchronized ConnectionManager getInstance() {
        if (instance == null) {
            instance = new ConnectionManager();
        }
        return instance;
    }

    public Connection getTransactionConnection() {
        if (transactionConnection == null || isConnectionClosed(transactionConnection)) {
            transactionConnection = createConnection(false);
        }
        return transactionConnection;
    }

    public Connection getAutoCommitConnection() {
        if (autoCommitConnection == null || isConnectionClosed(autoCommitConnection)) {
            autoCommitConnection = createConnection(true);
        }
        return autoCommitConnection;
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return getAutoCommitConnection().prepareStatement(sql);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return getAutoCommitConnection().prepareStatement(sql, autoGeneratedKeys);
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return getAutoCommitConnection().createStatement(resultSetType, resultSetConcurrency);
    }


    private Connection createConnection(boolean autoCommit) {
        try {
            Connection conn = DriverManager.getConnection(
                    PropertiesUtil.get(URL_KEY),
                    PropertiesUtil.get(USERNAME_KEY),
                    PropertiesUtil.get(PASSWORD_KEY)
            );
            conn.setAutoCommit(autoCommit);
            return conn;
        } catch (SQLException e) {
            throw new RuntimeException("Failed to create database connection", e);
        }
    }

    private boolean isConnectionClosed(Connection conn) {
        try {
            return conn == null || conn.isClosed();
        } catch (SQLException e) {
            return true;
        }
    }

    public void closeAll() {
        closeConnection(transactionConnection);
        closeConnection(autoCommitConnection);
    }

    private void closeConnection(Connection conn) {
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
            }
        }
    }

    private static void loadDriver() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("Failed to load JDBC driver", e);
        }
    }
}
